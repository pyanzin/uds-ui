@{
    Layout = null;
}
<!DOCTYPE html>
<meta charset="utf-8">
<style>
    * {
        font-family: Tahoma;
    }

    .node {
        stroke-width: 3px;
    }

    .link {
        stroke: #999;
        stroke-opacity: .5;
    }

    .avatar {
        border-radius: 100px;
    }

    #targetSummary {
        position: fixed;
    }

    .year {
        background-color: green;
    }
</style>
<body>
    <div id="targetSummary">
        <img class="avatar">
        <div id="targetName"></div>
        <div id="targetCity"></div>
        <div id="targetAge"></div>
    </div>
    <svg width="1200" height="900"></svg>
</body>
<script src="//d3js.org/d3.v3.min.js"></script>
<script scr="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.0/jquery.js"></script>
<div id="years"></div>
<div>
    <input type="button" value="Gender" onclick="gender()" />
    <input type="button" value="City" onclick="city()" />
    <input type="button" value="Relatives" onclick="relatives()" />
    <input type="button" value="Grouped" onclick="grouped()" />
    <input type="textbox" onchange="search(this)" />
    <input type="textbox" onchange="loadData(this.value)" />
</div>
<script>
    var getObjectKeys = Object.keys;

    var getObjectValues = function (obj) {
        var keys = getObjectKeys(obj);

        var result = [];

        for (var i = 0; i < keys.length; i++) {
            var value = obj[keys[i]];
            result.push(value);
        }

        return result;
    }

    var distinct = function (xs) {
        return xs.filter(function (x, i, xs) {
            return i === xs.indexOf(x);
        });
    }

    var identity = function (x) {
        return x;
    }

    var distribution = function (xs) {
        var result = {};
        for (var i = 0; i < xs.length; i++) {
            if (result[xs[i]]) {
                result[xs[i]]++;
            } else {
                result[xs[i]] = 1;
            }
        }

        return result;
    }

    var width = 1200,
        height = 900;

    var color = d3.scale.category20();

    var force = d3.layout.force()
        .charge(-300)
        .linkDistance(60)
        .size([width, height]);

    var gr = {};

    gr.lightness = function (d) {
        return 50;
    }

    var avatar = d3.select(".avatar")
        .on("click", function (x) {
            var id = d3.select(this).attr("data-id");
            window.history.pushState(id, id, "/id" + id);
            loadData(id);
        });

    var svg = d3.select("svg");
    //var lines = new Array(20);
    //
    //for (var i = lines.length - 1; i >= 0; i--) {
    //  lines[i] = [i * 30, 0, i * 30, 900];
    //};
    //
    //svg.selectAll("line")
    //  .data(lines)
    //  .enter().append("line")
    //  .attr("x1", function(d) { return d[0]; })
    //  .attr("y1", function(d) { return d[1]; })
    //  .attr("x2", function(d) { return d[2]; })
    //  .attr("y2", function(d) { return d[3]; })
    //  .style("stroke", "rgb(255,0,0)");

    function render(graph) {
        gr.nodes = graph.nodes;
        gr.links = graph.links;

        gr.nodes
            .filter(function (x) { return x.id === gr.id; })
            .forEach(function (x) {
                x.x = 600;
                x.y = 450;
                x.fixed = 1;
            });

        force
            .nodes(graph.nodes)
            .links(graph.links)
            .start();

        var link = svg.selectAll(".link")
            .data(graph.links)
          .enter().append("line")
            .attr("class", "link");

        var node = svg.selectAll(".node")
            .data(graph.nodes)
          .enter()
          .append("circle")
            .attr("class", "node")
            .attr("r", 8)
            .on("mouseover", function (d) {
                showAvatar(d);
            })
            .on("click", function (d) { d.fixed = true; }) // ws.send(d.id); })
            //.style("fill", function(d) { return color(d.cityId); })
            //.attr("fill", "url(#avatar)")

            //.style("stroke", function(d) { return d.gender ? "dodgerblue" : "violet"; })
            .call(force.drag);

        node.append("title")
            .text(function (d) { return d.firstName + ' ' + d.lastName; });

        force.on("tick", function () {
            link.attr("x1", function (d) { return d.source.x; })
                .attr("y1", function (d) { return d.source.y; })
                .attr("x2", function (d) { return d.target.x; })
                .attr("y2", function (d) { return d.target.y; });

            node.attr("cx", function (d) { return d.x; })
                .attr("cy", function (d) { return d.y; });
        });
    }

    function gender() {
        gr.hue = genderColor;
        updateGraphColor();
    }

    function city() {
        svg.selectAll('.node')
          .data(gr.nodes)
          .transition()
          .style("fill", function (d) {
              return color(d.cityId % 10);
          });

        ws.send(JSON.stringify({ forId: gr.id, targetId: gr.id, typeName: "cities" }));
    }

    function updateGraphColor() {
        svg.selectAll('.node')
            .data(gr.nodes)
            .transition()
            .style("fill", function (d) {
                return hsla(gr.hue(d), 90, gr.lightness(d), 1);
            });
    }

    function genderColor(d) {
        return d.gender ? 200 : 320;
    }

    function relatives() {
        svg.selectAll(".link")
              .data(gr.links)
              .transition()
              .attr("class", "link")
              .style("stroke", function (d) { return d.value ? 'red' : 'gray'; })
              .style("stroke-width", function (d) { return d.value ? 3 : 1; });
    }

    function grouped() {
        ws.send(JSON.stringify({ forId: gr.id, targetId: gr.id, typeName: "age" }));
    }

    function drawAge() {
        gr.lightness = function (d) {
            var result = gr.mean[d.id];
            if (result) {
                return 90 - gauss(result - gr.targetAge) * 40;
            } else {
                return 90;
            }
        };

        drawYears();
        updateGraphColor();
    }

    function drawYears() {
        var yearsDist = distribution(getObjectValues(gr.mean));

        var years = getObjectKeys(yearsDist).sort().map(function(x) {
            return { year: x, count: yearsDist[x] };
        });

        d3.select("#years").selectAll(".year")
            .data(years)
            .enter()
            .append("div")
            .attr("class", "year")
            .text(function(x) {
                return x.year;
            })
            .style("width", function(x) {
                return String(x.count * 10) + "px";
            });

    }

    function gauss(x) {
        return Math.pow(Math.E, -Math.pow(x, 2) / 16.0);
    }

    function hsla(h, s, l, a) {
        return 'hsla(' + h + ', ' + s + '%, ' + l + '%, ' + a + ')';
    }

    function search(e) {
        svg.selectAll('.node')
            .data(gr.nodes)
            .transition()
            .style("opacity", function (d) {
                if (d.firstName.toLowerCase().includes(e.value.toLowerCase()) || d.lastName.includes(e.value.toLowerCase())) {
                    return 1;
                } else {
                    return 0.3;
                };
            });
    }

    ws = new WebSocket("ws://localhost:6002");
    ws.onmessage = function (m) {
        var data = JSON.parse(m.data);

        if (data.typeName == "initial") {
            d3.select('svg').selectAll('.node').remove();
            d3.select('svg').selectAll('.link').remove();
            render(data.result);
        } else if (data.typeName == "age") {
            gr.mean = data.result;
            gr.targetAge = gr.mean[gr.id];
            drawAge();
        } else if (data.typeName == "cities") {
            gr.cities = data.result;
            showCities();
        }

    }

    ws.onclose = function () {
        console.log("ws is closed");
    };

    function loadData(id) {
        var id = parseInt(id);
        gr.id = id;
        ws.send(JSON.stringify({ forId: id, targetId: id, typeName: "initial" }));
    }

    function showAvatar(user) {
        avatar.attr("src", user.photoUrl)
          .attr("data-id", user.id);

        d3.select("#targetName")
          .text(user.firstName + ' ' + user.lastName);

        if (gr.cities) {
            d3.select("#targetCity")
              .text(gr.cities[user.cityId]);
        }

        if (gr.mean) {
            d3.select("#targetAge")
              .text(gr.mean[user.id]);
        }
    }

    ws.onopen = function () {
        var id = window.location.pathname;
        loadData(id.substr(3));
    };

</script>
